package longpipes;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.*;
import java.awt.Color;

public class GUI extends javax.swing.JFrame {

    // Variables Declared
    double length, diameter, totalCost;
    int plasticGrade, colours, quantity;
    boolean innerInsulation, outerReinforcement, chemicalResistance, lengthValid, diameterValid, quantityValid, valid;
    String cResistanceTableValue;
    double[] costPerInch = {0.4, 0.6, 0.75, 0.8, 0.95};
    // Creation of ArrayList to store all objects
    List<Pipe> totalPipes = new ArrayList<>();
    
    /**
     * Creates new form GUI
     */
    public GUI() {
      initComponents();
      // Set Order to disabled on load of GUI
      orderSubmit.setEnabled(false); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lengthLabel = new javax.swing.JLabel();
        diameterLabel = new javax.swing.JLabel();
        plasticGradeLabel = new javax.swing.JLabel();
        coloursLabel = new javax.swing.JLabel();
        quantityLabel = new javax.swing.JLabel();
        chemicalResistanceInput = new javax.swing.JCheckBox();
        quantityInput = new javax.swing.JTextField();
        innerInsulationInput = new javax.swing.JCheckBox();
        outerReinforcementInput = new javax.swing.JCheckBox();
        coloursInput = new javax.swing.JComboBox<>();
        lengthInput = new javax.swing.JTextField(5);
        plasticGradeInput = new javax.swing.JComboBox<>();
        addSubmit = new javax.swing.JButton();
        diameterInput = new javax.swing.JTextField();
        totalCostLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        totalCostValue = new javax.swing.JLabel();
        clearSubmit = new javax.swing.JButton();
        orderSubmit = new javax.swing.JButton();
        welcomeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Long Pipes");
        setMinimumSize(new java.awt.Dimension(860, 480));
        setPreferredSize(new java.awt.Dimension(860, 530));
        setResizable(false);
        setSize(new java.awt.Dimension(860, 480));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lengthLabel.setText("Length (Metres):");
        getContentPane().add(lengthLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(329, 285, -1, -1));

        diameterLabel.setText("Diameter (Inches):");
        getContentPane().add(diameterLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(329, 320, -1, -1));

        plasticGradeLabel.setText("Plastic Grade:");
        getContentPane().add(plasticGradeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(329, 389, -1, -1));

        coloursLabel.setText("Colours:");
        getContentPane().add(coloursLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 285, -1, -1));

        quantityLabel.setText("Quantity:");
        getContentPane().add(quantityLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(329, 352, -1, -1));

        chemicalResistanceInput.setText("Chemical Resistance");
        getContentPane().add(chemicalResistanceInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(612, 379, -1, -1));
        getContentPane().add(quantityInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 350, 50, -1));

        innerInsulationInput.setText("Inner Insulation");
        getContentPane().add(innerInsulationInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(612, 316, -1, -1));

        outerReinforcementInput.setText("Outer Reinforcement");
        getContentPane().add(outerReinforcementInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(612, 347, -1, -1));

        coloursInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2" }));
        getContentPane().add(coloursInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(743, 281, -1, -1));
        getContentPane().add(lengthInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(499, 280, 50, -1));

        plasticGradeInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));
        getContentPane().add(plasticGradeInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(485, 385, -1, -1));

        addSubmit.setText("Add");
        addSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSubmitActionPerformed(evt);
            }
        });
        getContentPane().add(addSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 450, -1, -1));
        getContentPane().add(diameterInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(499, 315, 50, -1));

        totalCostLabel.setText("Total Cost :");
        getContentPane().add(totalCostLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(329, 455, -1, -1));

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Length (Metres)", "Diameter (Inches)", "Plastic Grade", "Colours", "Inner Insulation", "Outer Reinforcement", "Chemical Resistance", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        orderTable.setAutoscrolls(false);
        jScrollPane1.setViewportView(orderTable);
        if (orderTable.getColumnModel().getColumnCount() > 0) {
            orderTable.getColumnModel().getColumn(0).setResizable(false);
            orderTable.getColumnModel().getColumn(0).setPreferredWidth(105);
            orderTable.getColumnModel().getColumn(1).setResizable(false);
            orderTable.getColumnModel().getColumn(1).setPreferredWidth(120);
            orderTable.getColumnModel().getColumn(2).setResizable(false);
            orderTable.getColumnModel().getColumn(2).setPreferredWidth(95);
            orderTable.getColumnModel().getColumn(3).setResizable(false);
            orderTable.getColumnModel().getColumn(3).setPreferredWidth(60);
            orderTable.getColumnModel().getColumn(4).setResizable(false);
            orderTable.getColumnModel().getColumn(4).setPreferredWidth(105);
            orderTable.getColumnModel().getColumn(5).setResizable(false);
            orderTable.getColumnModel().getColumn(5).setPreferredWidth(135);
            orderTable.getColumnModel().getColumn(6).setResizable(false);
            orderTable.getColumnModel().getColumn(6).setPreferredWidth(145);
            orderTable.getColumnModel().getColumn(7).setResizable(false);
            orderTable.getColumnModel().getColumn(7).setPreferredWidth(65);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 12, 836, 250));
        getContentPane().add(totalCostValue, new org.netbeans.lib.awtextra.AbsoluteConstraints(408, 450, 140, 29));

        clearSubmit.setText("Clear");
        clearSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSubmitActionPerformed(evt);
            }
        });
        getContentPane().add(clearSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 450, -1, -1));

        orderSubmit.setText("Order");
        orderSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderSubmitActionPerformed(evt);
            }
        });
        getContentPane().add(orderSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 450, -1, -1));

        welcomeLabel.setText("<html>Welcome to the LongPipes Ordering System. To begin, simply enter in and select the attributes of the pipe you wish to order and click 'Add'.<br><br>The orders you make will be added to the table above, and when you are ready to checkout, click 'Order' and your total will be displayed.<br><br>To clear all your orders, click 'Clear'.</html>");
        getContentPane().add(welcomeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 280, 300, 170));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Add method initiated by the Add event handler 
    public void add() {

      // Validation booleans returning true or false dependent on the validation methods, which are sent the input values
      lengthValid = lengthValidation(lengthInput.getText());
      diameterValid = diameterValidation(diameterInput.getText());
      quantityValid = quantityValidation(quantityInput.getText());

      // If any of the three input fields fail to validate, the add method will terminate
      if (!lengthValid || !diameterValid || !quantityValid) {
        return;
      }

      // If all three text fields are valid, then parse the values and set the variables
      if (lengthValid && diameterValid && quantityValid) {

        length = Double.valueOf(lengthInput.getText());
        diameter = Double.valueOf(diameterInput.getText());
        plasticGrade = Integer.parseInt(plasticGradeInput.getSelectedItem().toString());
        colours = Integer.parseInt(coloursInput.getSelectedItem().toString());
        innerInsulation = innerInsulationInput.isSelected();
        outerReinforcement = outerReinforcementInput.isSelected();
        chemicalResistance = chemicalResistanceInput.isSelected();
        quantity = Integer.parseInt(quantityInput.getText());
        
        // Creates the table model used to display the orders
        DefaultTableModel GUIorderTable = (DefaultTableModel) orderTable.getModel();
        
        // If the attributes of pipe one had been entered, then a new pipe object will be created and added to the array list
        if (plasticGrade <= 3 && colours == 0 && !innerInsulation && !outerReinforcement) {
          Pipe pipeOne = new Pipe(length, diameter, plasticGrade, chemicalResistance, quantity, costPerInch[plasticGrade-1]);
          totalPipes.add(pipeOne);
          // cResistanceTableValue is used to display whether Chemical Resistance has been selected and to display it in the table
          if(chemicalResistance) {
            cResistanceTableValue = "Yes";
          } else {
            cResistanceTableValue = "No";
          }
          // New table row is created with the attributes of the pipe
          GUIorderTable.addRow(new Object[]{String.valueOf(length), String.valueOf(diameter), String.valueOf(plasticGrade), String.valueOf(colours), "No", "No", String.valueOf(cResistanceTableValue), String.valueOf(quantity)});
        }
        // If the attributes of pipe two had been entered, then a new pipe object with TypeTwo will be created and added to the array list
        else if (plasticGrade >= 2 && plasticGrade <= 4 && colours == 1 && !innerInsulation && !outerReinforcement) {
          TypeTwo pipeTwo = new TypeTwo(length, diameter, plasticGrade, chemicalResistance, quantity, costPerInch[plasticGrade-1], colours);
          totalPipes.add(pipeTwo);
          // cResistanceTableValue is used to display whether Chemical Resistance has been selected and to display it in the table
          if(chemicalResistance) {
            cResistanceTableValue = "Yes";
          } else {
            cResistanceTableValue = "No";
          }
          // New table row is created with the attributes of the pipe
          GUIorderTable.addRow(new Object[]{String.valueOf(length), String.valueOf(diameter), String.valueOf(plasticGrade), String.valueOf(colours), "No", "No", String.valueOf(cResistanceTableValue), String.valueOf(quantity)});
        }
        // If the attributes of pipe three had been entered, then a new pipe object with TypeThree will be created and added to the array list
        else if (plasticGrade >= 2 && colours == 2 && !innerInsulation && !outerReinforcement) {
          TypeThree pipeThree = new TypeThree(length, diameter, plasticGrade, chemicalResistance, quantity, costPerInch[plasticGrade-1]);
          totalPipes.add(pipeThree);
          // cResistanceTableValue is used to display whether Chemical Resistance has been selected and to display it in the table
          if(chemicalResistance) {
            cResistanceTableValue = "Yes";
          } else {
            cResistanceTableValue = "No";
          }
          // New table row is created with the attributes of the pipe
          GUIorderTable.addRow(new Object[]{String.valueOf(length), String.valueOf(diameter), String.valueOf(plasticGrade), String.valueOf(colours), "No", "No", String.valueOf(cResistanceTableValue), String.valueOf(quantity)});
        }
        // If the attributes of pipe four had been entered, then a new pipe object with TypeFour will be created and added to the array list
        else if (plasticGrade >= 2 && colours == 2 && innerInsulation && !outerReinforcement) {
          TypeFour pipeFour = new TypeFour(length, diameter, plasticGrade, chemicalResistance, quantity, costPerInch[plasticGrade-1]);
          totalPipes.add(pipeFour);
          // cResistanceTableValue is used to display whether Chemical Resistance has been selected and to display it in the table
          if(chemicalResistance) {
            cResistanceTableValue = "Yes";
          } else {
            cResistanceTableValue = "No";
          }
          // New table row is created with the attributes of the pipe
          GUIorderTable.addRow(new Object[]{String.valueOf(length), String.valueOf(diameter), String.valueOf(plasticGrade), String.valueOf(colours), "Yes", "No", String.valueOf(cResistanceTableValue), String.valueOf(quantity)});
        }
        
        // If the attributes of pipe five had been entered, then a new pipe object with TypeFive will be created and added to the array list
        else if (plasticGrade >= 2 && colours == 2 && innerInsulation && outerReinforcement) {
          TypeFive pipeFive = new TypeFive(length, diameter, plasticGrade, chemicalResistance, quantity, costPerInch[plasticGrade-1]);
          totalPipes.add(pipeFive);
          // cResistanceTableValue is used to display whether Chemical Resistance has been selected and to display it in the table
          if(chemicalResistance) {
            cResistanceTableValue = "Yes";
          } else {
            cResistanceTableValue = "No";
          }
          // New table row is created with the attributes of the pipe
          GUIorderTable.addRow(new Object[]{String.valueOf(length), String.valueOf(diameter), String.valueOf(plasticGrade), String.valueOf(colours), "Yes", "Yes", String.valueOf(cResistanceTableValue), String.valueOf(quantity)});
        }
        // Colour validation, if a plasticGrade is selected with an invalid colour selection, then an error dialog will display
        else if (plasticGrade == 1 && colours == 1 || plasticGrade == 1 && colours == 2 || plasticGrade == 4 && colours == 0 || plasticGrade == 5 && colours == 0 || plasticGrade == 5 && colours == 1) {
          JOptionPane.showMessageDialog(null, "Sorry, LongPipes doesn't supply a pipe with a plastic grade of " + plasticGrade + " with " + colours + " colour(s), therefore this order has been cancelled.", "Invalid Pipe Order", JOptionPane.ERROR_MESSAGE);
        }
        // Inner Insulation validation, if a plasticGrade is selected that does not have inner insulation, then an error dialog will display
        else if (plasticGrade == 1 && innerInsulation == true) {
          JOptionPane.showMessageDialog(null, "Sorry, LongPipes doesn't supply a pipe with a plastic grade of " + plasticGrade + " with inner insulation, therefore this order has been cancelled.", "Invalid Pipe Order", JOptionPane.ERROR_MESSAGE);
        }
        // Outer Reinforcement validation, if a plasticGrade is selected that does not have outer reinforcement, then an error dialog will display
        else if (plasticGrade == 1 || plasticGrade == 2 && outerReinforcement == true) {
          JOptionPane.showMessageDialog(null, "Sorry, LongPipes doesn't supply a pipe with a plastic grade of " + plasticGrade + " with outer reinforcement, therefore this order has been cancelled.", "Invalid Pipe Order", JOptionPane.ERROR_MESSAGE);
        }
      }
    }

    // Length Validation
    public boolean lengthValidation(String stringLength) {      
      try {
        // Checks if the length entered is a double
        length = Double.parseDouble(stringLength);
        // If length is less than or equal to 0, display an error message and change the input background colour to red
        if (length <= 0) {
          valid = false;
          JOptionPane.showMessageDialog(null, "The length needs to be a positive measurement.", "Invalid Pipe Order", JOptionPane.ERROR_MESSAGE);
          lengthInput.setBackground(Color.red);
        // If length is greater than 6, display an error message and change the input background colour to red
        } else if (length > 6) {
          JOptionPane.showMessageDialog(null, "LongPipes only supplies pipes up to 6 metres.", "Invalid Pipe Order", JOptionPane.ERROR_MESSAGE);
          lengthInput.setBackground(Color.red);
          valid = false;
        // Else length is valid, reset background colour
        } else {
          valid = true;
          lengthInput.setBackground(Color.white);
        }
      // Catch any input into the textbox that is not a number and display an error
      } catch (NumberFormatException error) {
        JOptionPane.showMessageDialog(null, "The pipe's length must be a number.", "Invalid Pipe Order", JOptionPane.ERROR_MESSAGE);
        lengthInput.setBackground(Color.red);
      }
      // Return valid boolean
      return valid;
    }
    
    // Diameter Validation
    public boolean diameterValidation(String stringInput) {
      try {
        // Checks if the diameter entered is a double
        diameter = Double.parseDouble(stringInput);
        // If diameter is less than or equal to 0, display an error message and change the input background colour to red
        if (diameter <= 0) {
          valid = false;
          JOptionPane.showMessageDialog(null, "The diameter needs to be a positive measurement.", "Invalid Pipe Order", JOptionPane.ERROR_MESSAGE);
          diameterInput.setBackground(Color.red);
        // If diameter is greater than 50, display an error message and change the input background colour to red
        } else if (diameter > 50) {
          JOptionPane.showMessageDialog(null, "LongPipes only supplies pipes with up to a 50-inch diameter.", "Invalid Pipe Order", JOptionPane.ERROR_MESSAGE);
          diameterInput.setBackground(Color.red);
          valid = false;
        // Else diameter is valid, reset background colour
        } else {
          valid = true;
          diameterInput.setBackground(Color.white);
        }
      // Catch any input into the textbox that is not a number and display an error
      } catch (NumberFormatException error) {
        JOptionPane.showMessageDialog(null, "The pipe's diameter must be a number.", "Invalid Pipe Order", JOptionPane.ERROR_MESSAGE);
        diameterInput.setBackground(Color.red);
      }
      // Return valid boolean
      return valid;
    }
    
    // Quantity Validation
    public boolean quantityValidation(String stringQuantity) {
      try {
        // Checks if the quantity entered is an integer
        quantity = Integer.parseInt(stringQuantity);
        // If quantity is less than or equal to 0, display an error message and change the input background colour to red
        if (quantity <= 0) {
          valid = false;
          JOptionPane.showMessageDialog(null, "The quantity needs to be a positive measurement.", "Invalid Pipe Order", JOptionPane.ERROR_MESSAGE);
          quantityInput.setBackground(Color.red);
        // If quantity is greater than 100, display an error message and change the input background colour to red
        } else if (quantity > 100) {
          JOptionPane.showMessageDialog(null, "LongPipes only supplies up to 100 pipes for one order.", "Invalid Pipe Order", JOptionPane.ERROR_MESSAGE);
          quantityInput.setBackground(Color.red);
          valid = false;
        // Else quantity is valid, reset background colour
        } else {
          valid = true;
          quantityInput.setBackground(Color.white);
        }
      // Catch any input into the textbox that is not a number and display an error
      } catch (NumberFormatException error) {
        JOptionPane.showMessageDialog(null, "The quantity must be a number.", "Invalid Pipe Order", JOptionPane.ERROR_MESSAGE);
        quantityInput.setBackground(Color.red);
      }
      // Return valid boolean
      return valid;
    }
    
    // Order Method
    public void order() {
      // Reset totalCost variable
      totalCost = 0.0;
      // Display confirm dialog to user to confirm order
      int dialogReply = JOptionPane.showConfirmDialog(null, "Are you sure you want to place the order?", "Order Confirm", JOptionPane.YES_NO_OPTION);
      // If yes, then loop through each pipe in ArrayList, adding the cost to totalCost
      if (dialogReply == JOptionPane.YES_OPTION) {
        for (int i = 0; i < totalPipes.size(); i++) {
          totalCost += totalPipes.get(i).calculateCost();
        }
        // Set the label totalCostValue to visible and set the text to display totalCost
        totalCostValue.setVisible(true);
        totalCostValue.setText("£" + String.format("%.2f", totalCost));
      }
    }
    
    // Reset Method
    public void reset() {
      // Resets all the text fields, combo boxes and check boxes
      lengthInput.setText("");
      diameterInput.setText("");
      quantityInput.setText("");
      plasticGradeInput.setSelectedIndex(0);
      coloursInput.setSelectedIndex(0);
      innerInsulationInput.setSelected(false);
      outerReinforcementInput.setSelected(false);
      chemicalResistanceInput.setSelected(false);
    }
    
    // Clear Method
    public void clear() {
      // Resets the background colour for all text fields
      lengthInput.setBackground(Color.white);
      diameterInput.setBackground(Color.white);
      quantityInput.setBackground(Color.white);
      
      // Resets the table model with a row count of 0
      DefaultTableModel GUIorderTable = (DefaultTableModel) orderTable.getModel();
      GUIorderTable.setRowCount(0);
      
      // Clears the totalPipes ArrayList
      totalPipes.clear();
      
      // Hides the totalCostValue label and resets the totalCost value
      totalCostValue.setVisible(false);
      totalCost = 0.0;

      // Disables the ability to Order
      orderSubmit.setEnabled(false);
    }

    // Enable Method
    public void enable() {
      // Sets all the text fields, combo boxes, check boxes and Add to enabled
      lengthInput.setEnabled(true);
      diameterInput.setEnabled(true);
      plasticGradeInput.setEnabled(true);
      coloursInput.setEnabled(true);
      innerInsulationInput.setEnabled(true);
      outerReinforcementInput.setEnabled(true);
      chemicalResistanceInput.setEnabled(true);
      quantityInput.setEnabled(true);
      addSubmit.setEnabled(true);
    }
    
    // Disable Method
    public void disable() {
      // Sets all the text fields, combo boxes, check boxes, Add and Order to disabled
      lengthInput.setEnabled(false);
      diameterInput.setEnabled(false);
      plasticGradeInput.setEnabled(false);
      coloursInput.setEnabled(false);
      innerInsulationInput.setEnabled(false);
      outerReinforcementInput.setEnabled(false);
      chemicalResistanceInput.setEnabled(false);
      quantityInput.setEnabled(false);
      addSubmit.setEnabled(false);
      orderSubmit.setEnabled(false);
    }
    
    // Add Event Handler
    private void addSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSubmitActionPerformed
      // Set Order to disabled by default
      orderSubmit.setEnabled(false);
      // Call Add Method
      add();
      // If the 3 text fields are valid, call Reset Method for the next order
      if(valid) {
        reset();
      }
      // Creates the GUIOrderTable model
      DefaultTableModel GUIorderTable = (DefaultTableModel) orderTable.getModel();
      // Gets the total row count for the table
      int rows = GUIorderTable.getRowCount();
      // If the 3 text fields are valid, and there is already 1 order, then set Order to enabled
      if (valid && rows >= 1) {
        orderSubmit.setEnabled(true);
      }
    }//GEN-LAST:event_addSubmitActionPerformed

    // Clear Event Handler
    private void clearSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSubmitActionPerformed
      // Calls Reset, Clear and Enable Methods
      reset();
      clear();
      enable();
    }//GEN-LAST:event_clearSubmitActionPerformed

    // Order Event Handler
    private void orderSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderSubmitActionPerformed
      // Calls Order and Disable Methods
      order();
      disable();
    }//GEN-LAST:event_orderSubmitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSubmit;
    private javax.swing.JCheckBox chemicalResistanceInput;
    private javax.swing.JButton clearSubmit;
    private javax.swing.JComboBox<String> coloursInput;
    private javax.swing.JLabel coloursLabel;
    private javax.swing.JTextField diameterInput;
    private javax.swing.JLabel diameterLabel;
    private javax.swing.JCheckBox innerInsulationInput;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lengthInput;
    private javax.swing.JLabel lengthLabel;
    private javax.swing.JButton orderSubmit;
    private javax.swing.JTable orderTable;
    private javax.swing.JCheckBox outerReinforcementInput;
    private javax.swing.JComboBox<String> plasticGradeInput;
    private javax.swing.JLabel plasticGradeLabel;
    private javax.swing.JTextField quantityInput;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JLabel totalCostLabel;
    private javax.swing.JLabel totalCostValue;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
}
